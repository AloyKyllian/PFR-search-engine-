import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.Pointer;
import com.sun.jna.Memory;

public class Main{
public interface MenuLibrary extends Library {

    MenuLibrary INSTANCE = (MenuLibrary) Native.loadLibrary("Menu.so", MenuLibrary.class);

    void MAE(Pointer config, char [] choix, Pointer erreurImage,Pointer erreurAudio, Pointer erreurTexte, Pointer erreurIndex);
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//Lo√Øc////////////////////////////////////
public interface ConfigLibrary extends Library {

    MenuLibrary INSTANCE = (MenuLibrary) Native.loadLibrary("Config.so", MenuLibrary.class);

    void MAE(Pointer config, char [] choix, Pointer erreurImage,Pointer erreurAudio, Pointer erreurTexte, Pointer erreurIndex);
}
public interface MenuLibrary extends Library {

    MenuLibrary INSTANCE = (MenuLibrary) Native.loadLibrary("Menu.so", MenuLibrary.class);
gdxvi
    void MAE(Pointer config, char [] choix, Pointer erreurImage,Pointer erreurAudio, Pointer erreurTexte, Pointer erreurIndex);
}
public interface MenuLibrary extends Library {

    MenuLibrary INSTANCE = (MenuLibrary) Native.loadLibrary("Menu.so", MenuLibrary.class);

    void MAE(Pointer config, char [] choix, Pointer erreurImage,Pointer erreurAudio, Pointer erreurTexte, Pointer erreurIndex);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//Yasmine/////////////////////////////
public interface LoginLibrary extends Library {

    LoginLibrary INSTANCE = (LoginLibrary) Native.loadLibrary("Login.so", MenuLibrary.class);
    
    void lire_fichier_login (lesLogins tablogin, int * erreur);
}
public interface ConnexionLibrary extends Library {

    ConnexionLibrary INSTANCE = (ConnexionLibrary) Native.loadLibrary("Menu.so", MenuLibrary.class);

    void MAE(Pointer config, char [] choix, Pointer erreurImage,Pointer erreurAudio, Pointer erreurTexte, Pointer erreurIndex);
}
public interface MenuLibrary extends Library {

    MenuLibrary INSTANCE = (MenuLibrary) Native.loadLibrary("Menu.so", MenuLibrary.class);

    void MAE(Pointer config, char [] choix, Pointer erreurImage,Pointer erreurAudio, Pointer erreurTexte, Pointer erreurIndex);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//youss//////////////////////////////
public interface MenuLibrary extends Library {

    MenuLibrary INSTANCE = (MenuLibrary) Native.loadLibrary("Menu.so", MenuLibrary.class);

    void MAE(Pointer config, char [] choix, Pointer erreurImage,Pointer erreurAudio, Pointer erreurTexte, Pointer erreurIndex);
}
public interface RechercheMotLibrary extends Library {

    RechercheMotLibrary INSTANCE = (RechercheMotLibrary) Native.loadLibrary("RechercheMot.so", RechercheMotLibrary.class);

    void rechercheMot(Pointer mot, Pointer chemin, Pointer tab_similaire tabResultat, int nb_mot, Pointer nbElTab, Pointer ptrErreur);

    int nbElTab = 0;
    Pointer ptrNbElTab=new Memory(4);
    ptrNbElTab.setInt(0,ptrNbElTab);

    int erreur = -1;
    Pointer ptrErreur=new Memory(4);
    ptrErreur.setInt(0,erreur);

    char[] chemin = new char[100];
    char[] mot = new char[100];
}

public interface LireResultatLibrary extends Library {

    LireResultatLibrary INSTANCE = (LireResultatLibrary) Native.loadLibrary("LireResultat.so", LireResultatLibrary.class);
    int LireResultat(tab_similaire *tabResultat, int nbElement, char *type, char *requete, char *tabFileName[], int nombre_mot_cle, int similarite);

}
public interface FichierExistLibrary extends Library {

    FichierExistLibrary INSTANCE = (FichierExistLibrary) Native.loadLibrary("FichierExist.so",FichierExistLibrary.class);

    int FichierExist(char [] chemin_fichier);
    int VerifExtension(char [] chemin,char [] extension); 
    char[] chemin_fichier = new char[100];
    char[] chemin = new char[100];
    char[] extension = new char[4];
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//hugo/////////////////////////////////
public interface DescripteurTexteLibrary extends Library {

    DescripteurTexteLibrary INSTANCE = (DescripteurTexteLibrary) Native.loadLibrary("descripteur_texte.so", DescripteurTexteLibrary.class);
    
    char[] mot_lu = new char[100];
    Pointer nettoyage(char[] mot_lu);
    boolean filtrage(Pointer mot);
    DESCRIPTEUR_TEXTE descripteur_texte( int nbr_mot, Pointer mot,DESCRIPTEUR_TEXTE tab);
    DESCRIPTEUR_TEXTE tab_occ(int nbr_occ,DESCRIPTEUR_TEXTE tab,DESCRIPTEUR_TEXTE tab_occ_finale);
    DESCRIPTEUR_TEXTE descripteur_texte_finale(Pointer chemin_fichier,int nbr_occ,DESCRIPTEUR_TEXTE tab_renvoyer);

}
public interface MenuLibrary extends Library {

    MenuLibrary INSTANCE = (MenuLibrary) Native.loadLibrary("Menu.so", MenuLibrary.class);

    void MAE(Pointer config, char [] choix, Pointer erreurImage,Pointer erreurAudio, Pointer erreurTexte, Pointer erreurIndex);
}
public interface MenuLibrary extends Library {

    MenuLibrary INSTANCE = (MenuLibrary) Native.loadLibrary("Menu.so", MenuLibrary.class);

    void MAE(Pointer config, char [] choix, Pointer erreurImage,Pointer erreurAudio, Pointer erreurTexte, Pointer erreurIndex);
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//kyllian///////////////////////////////////
public interface DescipteurAudioLibrary extends Library {

    DescipteurAudioLibrary INSTANCE = (DescipteurAudioLibrary) Native.loadLibrary("descipteuraudio.so", DescipteurAudioLibrary.class);

    descri_audio Descripteur_audio(int fenetre, int intervalle,Pointer chemin_fichier, Pointer erreur);
    int getligne(Pointer path, Pointer erreur);
}
public interface ComparaisonLibrary extends Library {

    ComparaisonLibrary INSTANCE = (ComparaisonLibrary) Native.loadLibrary("comparaison.so", MenuLibrary.class);

    tab_similaire *Comparaison_descripteur_image(int *Erreur, char PathRecueil[], char PathNvImg[], int Nb_Bits_Fort, int *Nb_des);
    float comparaison(int val_lu, descri_audio descripteur_compar√©, int ligne, int intervalle, descri_audio descri, float fenetre);
    tab_similaire *comparaison_audio(int fenetre, int intervalle, char *chemin_descripteur_compare, char *chemin_descripteur_audio, int *erreur, int *Nb_ligne);
    tab_similaire *comparaison_texte(int nbr_mot, char *chemin_fichier_a_compare, char *chemin_descripteur, int *Erreur, int *Nb_ligne);
    
}



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


public static void main(String[] args) {
    Config config ;
    Pointer ptrConfig=new Memory(4);
    ptrConfig.setConfig(0,config);

    int erreurImage = -1;
    Pointer ptrErreurImage=new Memory(4);
    ptrErreurImage.setInt(0,erreurImage);

    int erreurAudio = -1;
    Pointer ptrErreurAudio=new Memory(4);
    ptrErreurAudio.setInt(0,erreurAudio);

    int erreurIndex = -1;
    Pointer ptrErreurIndex=new Memory(4);
    ptrErreurIndex.setInt(0,erreurIndex);

    int erreurTexte = -1;
    Pointer ptrErreurTexte=new Memory(4);
    ptrErreurTexte.setInt(0,erreurTexte);

    char[] choix = new char[100];

    MAE(ptrConfig,choix, ptrErreurImage, ptrErreurAudio, ptrErreurTexte, ptrErreurIndex);
   
}
}
